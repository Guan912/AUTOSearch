一篇博文http://www.cnblogs.com/ywl925/articles/2811869.html
笔记：
一个典型的倒排索引主要由
词汇表（放分词之后的词典）和事件表（对应词汇出现的文件位置、文件里出现次数）两部分组成。
【1】．倒排文件的建立

（1）顺排文件的建立（分词词典）

假设有网页P1,P2,……,Pn，给每个网页文件赋予一个编号Pid，
给每个关键字赋予一个编号keyi，假设key是网页文件中的一个关键字，
ni表示该关键字在网页文件中出现的次数，
<hit1,hit2,…,hitn>表示该关键字在网页文件中的位置信息。

首先将网页内容切分成一系列关键字：Pi={Key1,key2,…，keyn}。建立以下顺排文件：
Pn={[n1，Key1(hit1,hit2,…,hitn)],…,[ny，keyj（hit1,hit2,…,hity）] }

例如，文字进行顺排文件操作。

“随着经济的发展，人们对生活的品质要求越来越高。特别是在视觉欣赏方面，更是追求精益求精。如何把模糊的图像变得清晰，
把暗淡的色彩变得色彩鲜艳是一个非常值得研究的课题。并且在数字电视、扫描仪、医疗图像、计算机视觉、卫星监测、
航空摄像等方面对图像的清晰度有着广泛的需求。目前基于网格和密度的聚类方法已经渗透到各个领域，且得到了令人意想不到的效果。
本文是将基于网格和密度的聚类方法运用到模糊图像中，从而对图像进行增色处理。”

假设第一段文字是一个网页P1的全部内容，段首的起始位置为1。

对网页进行自动分词，得到关键字以及关键字在网页文件中出现的位置信息。顺排文件的结果为：

P1={[1，经济（3）]，[1，发展（6）]，……，[2，视觉（26，93）]，……，[5，图像（46，88，107，177，182）]，……，[1，处理（189）]}
P2=……

（2）实现倒排文件的原理

顺排文件是以网页来索引关键字的，即形式为（网页→关键字）。
倒排处理，以关键字来索引网页，即形式为（关键字→网页）：

Keyi→{[Pid1,ni1(hit1,hit2,…,hitni1)],…,[Pidn,nin(hit1,hit2,…,hitnin)]}

对以上顺排文件中建立的两个实例网页P1和P2的顺排文件进行倒排，倒排文件的结果为：

经济→{[P1，1（3）]}

发展→{[P1，1（6）]，[P2，1（74）]}

图像→{[P1，5（46，88，107，177，182）]，[P2，8（3，13，21，49，96，103，130，140）]}

……

综上所述，倒排文件的实现过程是：先得到顺排文件，然后根据顺排文件得到倒排文件，从而实现由关键字来索引网页。

（3）倒排文件的优化之一—位图文件

在实际中，一般索引项并不存储实际的关键字，而存储它的一个编号值（kid），这样可以有效节约存储空间。
对于文件链表（Posting），只存储网页文件编号（Pid）和网页文件编号加上该关键字在文件中出现的位置信息。

想要得到同时包含某几个关键字的网页，那么直接把它们对应的网页文件位图向量进行与运算，就可以知道在哪些文件中同时包含了这几个关键字。
在文件数目不是很多的情况下，只存储命中信息，实现了命中信息和非命中信息（比如关键字在文件中的位置，关键字在文件中出现的频率等）的分离，
可以大大提高索引的效率。

把由网页文件向量Pi=<key1,key2,…,keyn>构成的“网页→关键字”，转化成“关键字→网页”。
转换方法是根据网页文件向量构成“网页-关键字”阵列，并用Bitmap作为存储结构，形成倒排矩阵A。

Bitmap文件实现的倒排矩阵在海量数据环境下是比较稀疏的，必须对它进行压缩，并且保证在解压的过程中，速度也比较快，这样可以大大提高索引的性能，
也节省了大量的存储空间。目前比较成熟的位图压缩算法主要有Delta encoding、Variable-length encoding、Gamma 
【2】  建立倒排文件索引的举例——Lucene索引
Lucene是一个高性能的Java全文检索工具包，它使用的是倒排文件索引结构。

 倒排文件：
关  键  字   文  章  号
i            1，2
am           1，2
my           2,3
……
加上“出现频率”和“出现位置”信息后，索引结构变为如表5-2所示。
表5-2  索引结构：
关  键  字     文章号[出现频率]      出 现 位 置
i              1[2],2[1]           [1，4,5]
am             1[1],2[1]           [2,6]
my             2[1],3[2]           [1,3，5]
……
以my这行为例来说明一下该结构。my在文章2中出现了1次，文章3中出现了2次，它的出现位置为“1,3,5”，
“1”就表示my在文章2中出现的一个位置，剩下的“3，5”就表示my是文章3中第3个和第5个关键字。

以上便是Lucene索引结构中最核心的部分。关键字是按字符顺序排列的（Lucene没有使用B树结构），因此Lucene可以用二元搜索算法快速定位关键字。

实现时Lucene将上面三列分别作为词典文件（Term Dictionary）、频率文件（Frequencies Dictionary）、
位置文件（Positions Dictionary）保存（将事件表分为两个文件）。
其中词典文件不仅保存有每个关键字，还保留了指向频率文件和位置文件的指针，通过指针可以找到该关键字的频率信息和位置信息。
